@page "/register"
@using Microsoft.AspNetCore.Identity
@using MovieApp.Domain.Entities
@using System.ComponentModel.DataAnnotations
@inject UserManager<User> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Register - Movie App</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Create Account</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="registerModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="form-group mb-3">
                            <label for="username">Username</label>
                            <InputText id="username" @bind-Value="registerModel.Username" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Username)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="email">Email</label>
                            <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Email)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password">Password</label>
                            <InputText id="password" @bind-Value="registerModel.Password" class="form-control" type="password" />
                            <small class="form-text text-muted">Password must be at least 8 characters and contain uppercase, lowercase, digit and special character.</small>
                            <ValidationMessage For="@(() => registerModel.Password)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="confirmPassword">Confirm Password</label>
                            <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" class="form-control" type="password" />
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-success">Create Account</button>
                        </div>
                    </EditForm>

                    <hr />
                    <div class="text-center">
                        <p>Already have an account? <a href="login">Login</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        try
        {
            if (registerModel.Password != registerModel.ConfirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            var user = new User
            {
                UserName = registerModel.Username,
                Email = registerModel.Email,
                RegisterDate = DateTime.UtcNow
            };

            var result = await UserManager.CreateAsync(user, registerModel.Password);

            if (result.Succeeded)
            {
                // Assign default user role
                await UserManager.AddToRoleAsync(user, "User");
                NavigationManager.NavigateTo("/login?registered=true");
            }
            else
            {
                errorMessage = string.Join(". ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, ErrorMessage = "Username must be between {2} and {1} characters", MinimumLength = 3)]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least {2} characters long", MinimumLength = 8)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", 
            ErrorMessage = "Password must include uppercase, lowercase, number and special character")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password confirmation is required")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}